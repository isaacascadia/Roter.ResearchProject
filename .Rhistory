simul.data <- matrix(nrow = (alp.n + sub.n + val.n), ncol = vars)
rownames(simul.data) <- c(paste("alp", 1:alp.n, sep = ""),
paste("sub", 1:sub.n, sep = ""),
paste("val", 1:val.n, sep = ""))
colnames(simul.data) <- paste("species", 1:vars, sep = "")
for(i in 1:vars){
set.seed(1234)
alp.values <- rnorm(n = alp.n, m = alp.m[i], sd = alp.sd[i])
set.seed(2345)
sub.values <- rnorm(n = sub.n, m = sub.m[i], sd = sub.sd[i])
set.seed(3456)
val.values <- rnorm(n = val.n, m = val.m[i], sd = val.sd[i])
simul.data[,i] <- c(alp.values, sub.values, val.values)
} # end of data simulation loop
# saving simulated data
write.csv(simul.data, paste(path.data.raw, name,
".data.csv", sep = ""))
# return simulated data
return(simul.data)
}
binary1 <- fsimulate(name = "binary1", n.vars = 6,
pop.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(x = 0.25, times = 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(x = 0.25, times = 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1
# defining the function fsimulate()
fsimulate <- function(name, n.vars,              # dataset name - files/figs
alp.n, alp.m, alp.sd,   # pop 1 sample characteristics
sub.n, sub.m, sub.sd,   # pop 2 sample characteristics
val.n, val.m, val.sd){  # pop 3 sample characteristics
simul.data <- matrix(nrow = (alp.n + sub.n + val.n), ncol = vars)
rownames(simul.data) <- c(paste("alp", 1:alp.n, sep = ""),
paste("sub", 1:sub.n, sep = ""),
paste("val", 1:val.n, sep = ""))
colnames(simul.data) <- paste("species", 1:n.vars, sep = "")
for(i in 1:vars){
set.seed(1234)
alp.values <- rnorm(n = alp.n, m = alp.m[i], sd = alp.sd[i])
set.seed(2345)
sub.values <- rnorm(n = sub.n, m = sub.m[i], sd = sub.sd[i])
set.seed(3456)
val.values <- rnorm(n = val.n, m = val.m[i], sd = val.sd[i])
simul.data[,i] <- c(alp.values, sub.values, val.values)
} # end of data simulation loop
# saving simulated data
write.csv(simul.data, paste(path.data.raw, name,
".data.csv", sep = ""))
# return simulated data
return(simul.data)
}
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(x = 0.25, times = 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
# defining the function fsimulate()
fsimulate <- function(name, n.vars,              # dataset name - files/figs
alp.n, alp.m, alp.sd,   # pop 1 sample characteristics
sub.n, sub.m, sub.sd,   # pop 2 sample characteristics
val.n, val.m, val.sd){  # pop 3 sample characteristics
simul.data <- matrix(nrow = (alp.n + sub.n + val.n), ncol = vars)
rownames(simul.data) <- c(paste("alp", 1:alp.n, sep = ""),
paste("sub", 1:sub.n, sep = ""),
paste("val", 1:val.n, sep = ""))
colnames(simul.data) <- paste("species", 1:n.vars, sep = "")
for(i in 1:n.vars){
set.seed(1234)
alp.values <- rnorm(n = alp.n, m = alp.m[i], sd = alp.sd[i])
set.seed(2345)
sub.values <- rnorm(n = sub.n, m = sub.m[i], sd = sub.sd[i])
set.seed(3456)
val.values <- rnorm(n = val.n, m = val.m[i], sd = val.sd[i])
simul.data[,i] <- c(alp.values, sub.values, val.values)
} # end of data simulation loop
# saving simulated data
write.csv(simul.data, paste(path.data.raw, name,
".data.csv", sep = ""))
# return simulated data
return(simul.data)
}
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(x = 0.25, times = 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1
# defining the function fsimulate()
fsimulate <- function(name, n.vars,              # dataset name - files/figs
alp.n, alp.m, alp.sd,   # pop 1 sample characteristics
sub.n, sub.m, sub.sd,   # pop 2 sample characteristics
val.n, val.m, val.sd){  # pop 3 sample characteristics
simul.data <- matrix(nrow = (alp.n + sub.n + val.n), ncol = n.vars)
rownames(simul.data) <- c(paste("alp", 1:alp.n, sep = ""),
paste("sub", 1:sub.n, sep = ""),
paste("val", 1:val.n, sep = ""))
colnames(simul.data) <- paste("species", 1:n.vars, sep = "")
for(i in 1:n.vars){
set.seed(1234)
alp.values <- rnorm(n = alp.n, m = alp.m[i], sd = alp.sd[i])
set.seed(2345)
sub.values <- rnorm(n = sub.n, m = sub.m[i], sd = sub.sd[i])
set.seed(3456)
val.values <- rnorm(n = val.n, m = val.m[i], sd = val.sd[i])
simul.data[,i] <- c(alp.values, sub.values, val.values)
} # end of data simulation loop
# saving simulated data
write.csv(simul.data, paste(path.data.raw, name,
".data.csv", sep = ""))
# return simulated data
return(simul.data)
}
# defining the function fsimulate()
fsimulate <- function(name, n.vars,              # dataset name - files/figs
alp.n, alp.m, alp.sd,   # pop 1 sample characteristics
sub.n, sub.m, sub.sd,   # pop 2 sample characteristics
val.n, val.m, val.sd){  # pop 3 sample characteristics
simul.data <- matrix(nrow = (alp.n + sub.n + val.n), ncol = n.vars)
rownames(simul.data) <- c(paste("alp", 1:alp.n, sep = ""),
paste("sub", 1:sub.n, sep = ""),
paste("val", 1:val.n, sep = ""))
colnames(simul.data) <- paste("species", 1:n.vars, sep = "")
for(i in 1:n.vars){
set.seed(1234)
alp.values <- rnorm(n = alp.n, m = alp.m[i], sd = alp.sd[i])
set.seed(2345)
sub.values <- rnorm(n = sub.n, m = sub.m[i], sd = sub.sd[i])
set.seed(3456)
val.values <- rnorm(n = val.n, m = val.m[i], sd = val.sd[i])
simul.data[,i] <- c(alp.values, sub.values, val.values)
} # end of data simulation loop
# saving simulated data
write.csv(simul.data, paste(path.data.raw, name,
".data.csv", sep = ""))
# return simulated data
return(simul.data)
}
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(x = 0.25, times = 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/2.functions.R', echo=TRUE)
fjaccard(binary1, "binary1")
# function for calculating jaccard's similarity for a presence/absence dataset
# and outputting a heatmap
fjaccard <- function(binary.dataframe, ji.name){
n.plots <- nrow(binary.dataframe)
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
combs <- rbind(combs, matrix(rep(x = 1:n.plots, 2),
nrow = n.plots, ncol = 2))
# create an empty matrix
j.output <- matrix(data = NA,
nrow = n.plots,
ncol = n.plots)
# row and column names
rownames(j.output) <- paste("plot", 1:n.plots, sep = "")
colnames(j.output) <- paste("plot", 1:n.plots, sep = "")
# loop definition, repeats for every possible combination of samples in datset
for(i in 1:nrow(combs)){
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
# calculate jaccard index for pair
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output[n2, n1] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end of jaccard index loop
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
# begin saving of heatmap
pdf(paste(path.figures, gsub(" ", "", ji.name), ".heatmap.pdf", sep = ""),
width = 5, height = 5)
# display heatmap to be saved
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
dev.off()  # finish saving plots
# save data output as a .csv
write.csv(j.output, paste(path.data.output, gsub(" ", "", ji.name),
".jaccard.csv", sep = ""))
# display output dataframe
return(j.output)
}  # end jaccard function
fjaccard(binary1, "binary1")
binary1
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output
intersect(trees.i, trees.j)
unique(c(trees.i, trees.j)
unique(c(trees.i, trees.j))
unique(c(trees.i, trees.j)) %>% length()
trees.i
trees.j
binary.dataframe[n1,] == 1
which(binary.dataframe[n1,] == 1)
which(binary.dataframe[n2,] == 1)
combs[i,1]
combs[i,2]
trees.i
length(c(trees.i, trees.j))
# function for calculating jaccard's similarity for a presence/absence dataset
# and outputting a heatmap
fjaccard <- function(binary.dataframe, ji.name){
n.plots <- nrow(binary.dataframe)
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
combs <- rbind(combs, matrix(rep(x = 1:n.plots, 2),
nrow = n.plots, ncol = 2))
# create an empty matrix
j.output <- matrix(data = NA,
nrow = n.plots,
ncol = n.plots)
# row and column names
rownames(j.output) <- paste("plot", 1:n.plots, sep = "")
colnames(j.output) <- paste("plot", 1:n.plots, sep = "")
# loop definition, repeats for every possible combination of samples in datset
for(i in 1:nrow(combs)){
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
if(length(c(trees.i, trees.j))){
j.output[n1, n2] <- 0
j.output[n2, n1] <- 1
} else {  # end if, beginning else
# calculate jaccard index for pair
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output[n2, n1] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end else
}  # end of jaccard index loop
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
# begin saving of heatmap
pdf(paste(path.figures, gsub(" ", "", ji.name), ".heatmap.pdf", sep = ""),
width = 5, height = 5)
# display heatmap to be saved
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
dev.off()  # finish saving plots
# save data output as a .csv
write.csv(j.output, paste(path.data.output, gsub(" ", "", ji.name),
".jaccard.csv", sep = ""))
# display output dataframe
return(j.output)
}  # end jaccard function
fjaccard(binary1, "binary1")
fjaccard(binary1, "binary1")
fjaccard(binary1, "binary1")
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(0.25, 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1
# function for calculating jaccard's similarity for a presence/absence dataset
# and outputting a heatmap
fjaccard <- function(binary.dataframe, ji.name){
n.plots <- nrow(binary.dataframe)
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
combs <- rbind(combs, matrix(rep(x = 1:n.plots, 2),
nrow = n.plots, ncol = 2))
# create an empty matrix
j.output <- matrix(data = NA,
nrow = n.plots,
ncol = n.plots)
# row and column names
rownames(j.output) <- paste("plot", 1:n.plots, sep = "")
colnames(j.output) <- paste("plot", 1:n.plots, sep = "")
# loop definition, repeats for every possible combination of samples in datset
for(i in 1:nrow(combs)){
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
if(length(c(trees.i, trees.j))){
j.output[n1, n2] <- 0
j.output[n2, n1] <- 0
} else {  # end if, beginning else
# calculate jaccard index for pair
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output[n2, n1] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end else
}  # end of jaccard index loop
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
# begin saving of heatmap
pdf(paste(path.figures, gsub(" ", "", ji.name), ".heatmap.pdf", sep = ""),
width = 5, height = 5)
# display heatmap to be saved
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
dev.off()  # finish saving plots
# save data output as a .csv
write.csv(j.output, paste(path.data.output, gsub(" ", "", ji.name),
".jaccard.csv", sep = ""))
# display output dataframe
return(j.output)
}  # end jaccard function
fjaccard(binary1, "binary1")
fjaccard(binary1, "binary1")
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
# display heatmap to user in RStudio graphics window
pheatmap(j.output,
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
1:n.vars * 1234
1:6 * 1234
# defining the function fsimulate()
fsimulate <- function(name, n.vars,              # dataset name - files/figs
alp.n, alp.m, alp.sd,   # pop 1 sample characteristics
sub.n, sub.m, sub.sd,   # pop 2 sample characteristics
val.n, val.m, val.sd){  # pop 3 sample characteristics
simul.data <- matrix(nrow = (alp.n + sub.n + val.n), ncol = n.vars)
rownames(simul.data) <- c(paste("alp", 1:alp.n, sep = ""),
paste("sub", 1:sub.n, sep = ""),
paste("val", 1:val.n, sep = ""))
colnames(simul.data) <- paste("species", 1:n.vars, sep = "")
seeds <- 1:n.vars * 1234
for(i in 1:n.vars){
set.seed(seeds[i])
alp.values <- rnorm(n = alp.n, m = alp.m[i], sd = alp.sd[i])
set.seed(seeds[i] + 1)
sub.values <- rnorm(n = sub.n, m = sub.m[i], sd = sub.sd[i])
set.seed(seeds[i] + 2)
val.values <- rnorm(n = val.n, m = val.m[i], sd = val.sd[i])
simul.data[,i] <- c(alp.values, sub.values, val.values)
} # end of data simulation loop
# saving simulated data
write.csv(simul.data, paste(path.data.raw, name,
".data.csv", sep = ""))
# return simulated data
return(simul.data)
}
fjaccard(binary1, "binary1")
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(0.25, 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1
fjaccard(binary1, "binary1")
16.5/20
binary1 <- fsimulate(name = "binary1", n.vars = 6,
alp.n = 7, alp.m = rep(x = 0.5, times = 6),
alp.sd = rep(0.25, 6),
sub.n = 7, sub.m = rep(0.5, 6), sub.sd = rep(0.25, 6),
val.n = 7, val.m = rep(0.5, 6), val.sd = rep(0.25, 6)) %>%
round()
binary1
fjaccard(binary1, "binary1")
binary.dataframe <- binary1
ji.name <- "binary1"
n.plots <- nrow(binary.dataframe)
n.plots
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
combs
combs
combs <- rbind(combs, matrix(rep(x = 1:n.plots, 2),
nrow = n.plots, ncol = 2))
combs
# create an empty matrix
j.output <- matrix(data = NA,
nrow = n.plots,
ncol = n.plots)
j.output
# row and column names
rownames(j.output) <- paste("plot", 1:n.plots, sep = "")
colnames(j.output) <- paste("plot", 1:n.plots, sep = "")
# loop definition, repeats for every possible combination of samples in datset
for(i in 1:nrow(combs)){
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
if(length(c(trees.i, trees.j))){
j.output[n1, n2] <- 0
j.output[n2, n1] <- 0
} else {  # end if, beginning else
# calculate jaccard index for pair
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output[n2, n1] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end else
}  # end of jaccard index loop
j.output
# loop definition, repeats for every possible combination of samples in datset
for(i in 1:nrow(combs)){
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
if(length(c(trees.i, trees.j)) == 0){
j.output[n1, n2] <- 0
j.output[n2, n1] <- 0
} else {  # end if, beginning else
# calculate jaccard index for pair
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output[n2, n1] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end else
}  # end of jaccard index loop
j.output
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
dev.off()  # finish saving plots
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
dev.off()  # finish saving plots
fjaccard <- function(binary.dataframe, ji.name){
n.plots <- nrow(binary.dataframe)
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
combs <- rbind(combs, matrix(rep(x = 1:n.plots, 2),
nrow = n.plots, ncol = 2))
# create an empty matrix
j.output <- matrix(data = NA,
nrow = n.plots,
ncol = n.plots)
# row and column names
rownames(j.output) <- paste("plot", 1:n.plots, sep = "")
colnames(j.output) <- paste("plot", 1:n.plots, sep = "")
# loop definition, repeats for every possible combination of samples in datset
for(i in 1:nrow(combs)){
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
if(length(c(trees.i, trees.j)) == 0){
j.output[n1, n2] <- 0
j.output[n2, n1] <- 0
} else {  # end if, beginning else
# calculate jaccard index for pair
j.output[n1, n2] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.output[n2, n1] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end else
}  # end of jaccard index loop
# display heatmap to user in RStudio graphics window
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
# begin saving of heatmap
pdf(paste(path.figures, gsub(" ", "", ji.name), ".heatmap.pdf", sep = ""),
width = 5, height = 5)
# display heatmap to be saved
pheatmap(j.output, main =  paste(ji.name, "JI scores"),
legend_labels = c("JI Score"),
cluster_rows = F, cluster_cols = F)
dev.off()  # finish saving plots
# save data output as a .csv
write.csv(j.output, paste(path.data.output, gsub(" ", "", ji.name),
".jaccard.csv", sep = ""))
# display output dataframe
return(j.output)
}  # end jaccard function
fjaccard(binary1, "binary1")
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
