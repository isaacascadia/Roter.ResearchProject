test.data <- data.frame(plot = c(1:20),
tree1 = rnorm(n = 20, mean = 150, sd = 12),
tree2 = rnorm(n = 20, mean = 150, sd = 12),
tree3 = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 150, sd = 12),
stringsAsFactors = F)
test.data
test.data <- data.frame(plot = c(1:20),
tree1 = rnorm(n = 20, mean = 150, sd = 12),
tree2 = rnorm(n = 21, mean = 150, sd = 12),
tree3 = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 150, sd = 12),
stringsAsFactors = F)
test.data <- data.frame(plot = c(1:20),
tree1 = rnorm(n = 20, mean = 180, sd = 12),
tree2 = rnorm(n = 20, mean = 170, sd = 12),
tree3 = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
test.data
?rnorm
test.data <- data.frame(plot = c(1:20),
tree1 = rnorm(n = 20, mean = 180, sd = 12),
tree2 = rnorm(n = 20, mean = 170, sd = 12),
tree3 = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
plot(test.data)
hist(test.data)
levels(test.data)
test.data <- data.frame(plot = c(1:20),
tree1 = rnorm(n = 20, mean = 180, sd = 12),
tree2 = rnorm(n = 20, mean = 170, sd = 12),
tree3 = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = T)
levels(test.data)
test.data <- data.frame(plot = c(1:20),
tree1 = rnorm(n = 20, mean = 180, sd = 12),
tree2 = rnorm(n = 20, mean = 170, sd = 12),
tree3 = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
levels(test.data)
test.data <- data.frame(plot = c(1:20),
"tree1" = rnorm(n = 20, mean = 180, sd = 12),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
tree4 = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
test.data <- data.frame(plot = c(1:20),
test.data
test.data
# install.packages("dplyr")
install.packages("vegan")
library(vegan)
veg.dist(test.data, method = "jaccard")
vegdist(test.data, method = "jaccard")
test.data <- data.frame(plot = c(1:20),
"tree1" = rnorm(n = 20, mean = 150, sd = 12),
"tree2" = rnorm(n = 20, mean = 150, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 150, sd = 12),
stringsAsFactors = F)
vegdist(test.data, method = "jaccard")
test.data <- data.frame(plot = c(1:20),
"tree1" = rnorm(n = 20, mean = 150, sd = 1),
"tree2" = rnorm(n = 20, mean = 150, sd = 1),
"tree3" = rnorm(n = 20, mean = 150, sd = 1),
"tree4" = rnorm(n = 20, mean = 150, sd = 1),
stringsAsFactors = F)
vegdi'st(test.data, method = "jaccard")
vegdist(test.data, method = "jaccard")
vegdist(test.data, method = "jaccard")
test.data <- data.frame(plot = c(1:20),
"tree1" = rnorm(n = 20, mean = 180, sd = 12),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
?abs()
?J()
test.data[2,2]
test.data[1,2]
test.data <- data.frame(plot = c(1:20),
"tree1" = floor(rnorm(n = 20, mean = 180, sd = 12)),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
test.data
?set.seed
set.seed(4)
set.seed(seed = 4)
vegdist(test.data, method = "jaccard", upper = T)
vegdist(test.data, method = "jaccard", upper = F)
vegdist(test.data, method = "jaccard", upper = T)
vegdist(test.data, method = "jaccard", upper = F)
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
test.data[1,2] - test.data[2,2]
test.data[2,2]
test.data[1,2]
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
test.data[1,2] - test.data[2,2] %>% abs()
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
test.data[1,2] - test.data[2,2] %>% abs()
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
test.data[1,2] - test.data[2,2] %>%
abs()
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
(test.data[1,2] - test.data[2,2]) %>%
abs()
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
abs(test.data[1,2] - test.data[2,2]) %>%
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
abs(test.data[1,2] - test.data[2,2])
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
abs(test.data[1,2] - test.data[2,2])
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
abs(test.data[1,2] - test.data[2,2]) / test.data[1,2] - test.data[2,2]
# Jaccard distance based on Bray-Curtis dissimilarity (vegan)
abs(test.data[1,2] - test.data[2,2]) / test.data[1,2] + test.data[2,2]
ncol(test.data)
test.data <- data.frame("tree1" = floor(rnorm(n = 20, mean = 180, sd = 12)),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
ncol(test.data)
for(i in 1:ncol(test.data)){
abs(test.data[1,i] - test.data[2,i+1]) / test.data[1,i] + test.data[2,i+1]
}
bdist <- rep(NA, 20)
for(i in 1:ncol(test.data)){
bdist[i] <- abs(test.data[1,i] - test.data[2,i+1]) /
test.data[1,i] + test.data[2,i+1]
}
rnorm(500, mean = 250, sd = 15) %>%
hist(col = "darkgreen")
hist(x = test.data$tree1, col = "darkgreen")
test.pres <- data.frame("tree1" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree2" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree3" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree4" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
stringsAsFactors = F)
hist(x = test.data$tree1, col = "darkgreen")
hist(x = test.pres$tree1, col = "darkgreen")
test.pres <- data.frame("tree1" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree2" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree3" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree4" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
stringsAsFactors = F)
test.pres
rep(20, 4)
groups <- c("isolated", "companion.not.injected", "companion.injected")
n.groups <- c(17, 13, 12)
means.groups <- c(37,35,57)
sd.groups <- c(3, 3, 2)
#make vector with empty elements
stretching <- c(NA)
# simulate data
for(i in 1:length(n.groups)){
stretching <- c(stretching,rnorm(n.groups[i], means.groups[i],sd.groups[i]))
stretching
groups <- c("isolated", "companion.not.injected", "companion.injected")
n.groups <- c(17, 13, 12)
means.groups <- c(37,35,57)
sd.groups <- c(3, 3, 2)
#make vector with empty elements
stretching <- c(NA)
# simulate data
for(i in 1:length(n.groups)){
stretching <- c(stretching,rnorm(n.groups[i], means.groups[i],sd.groups[i]))
}
stretching
treatment <- rep(groups, n.groups)
treatment
trees <- c("tree1", "tree2", "tree3", "tree4")
n.trees <- c(20, 20, 20, 20)
mean.trees <- c(180, 170, 150, 120)
sd.trees <- c(12, 12, 12, 12)
tree.abund <- rep(NA, sum(n.trees))
for(i in 1:length(trees)){
tree.abund[,i] <- rnorm(n.trees[1], mean.trees[1], sd.trees[1])
}
tree.abund <- rep(NA, sum(n.trees))
for(i in 1:length(trees)){
tree.abund <- rnorm(n.trees[1], mean.trees[1], sd.trees[1])
}
tree.abund
tree.abund <- rep(NA, sum(n.trees))
for(i in 1:length(trees)){
tree.abund <- rnorm(n.trees[i], mean.trees[i], sd.trees[i])
}
tree.abund
tree.abund <- rep(NA, sum(n.trees))
for(i in 1:length(trees)){
tree.abund <- c(tree.abund, rnorm(n.trees[i], mean.trees[i], sd.trees[i]))
}
tree.abund
test.pres <- data.frame("tree1" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree2" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree3" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree4" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
stringsAsFactors = F)
test.pres
matrix(test.pres)
table(test.pres)
test.pres
# binary (presence/absence) Jaccard's distance
rowsum(test.pres[,1])
# binary (presence/absence) Jaccard's distance
rowsum(test.pres[,1], group = test.pres[1])
# binary (presence/absence) Jaccard's distance
rowsum(test.pres, group = test.pres[1])
# binary (presence/absence) Jaccard's distance
rowsum(test.pres[1], group = test.pres[1])
# binary (presence/absence) Jaccard's distance
?rowsum.data.frame(test.pres[1], group = test.pres[1])
test.pres[1]
test.pres[,1]
test.pres
test.pres[1,]
sum(test.pres[1,])
sum(test.pres[2,])
(test.pres[2,]
test.pres[2,]
sum(testpres[1,])
sum(test.pres[1,])
test.pres[1,]
test.pres[2,]
matrix(c(test.pres[1,], test.pres[2,]), ncol = length(test.pres[1])
matrix(c(test.pres[1,], test.pres[2,]), ncol = length(test.pres[1]))
test.pres[2,]
c(test.pres[1,], test.pres[2,])
as.numeric(c(test.pres[1,], test.pres[2,]))
matrix(as.numeric(c(test.pres[1,], test.pres[2,])), ncol = length(test.pres[1]))
length(test.pres[1])
matrix(as.numeric(c(test.pres[1,], test.pres[2,])),
ncol = length(test.pres[1,]))
matrix(as.numeric(c(test.pres[1,], test.pres[2,])),
nrow = 2))
c(test.pres[1,], test.pres[2,]) %>% as.numeric()
matrix(data = c(test.pres[1,], test.pres[2,]) %>% as.numeric(),
n))
matrix(data = c(test.pres[1,], test.pres[2,]) %>% as.numeric(),
nrow = 2, byrow = T)
sum(test.pres[1,])
rowsums(M)
rowSums(M)
M <- matrix(data = c(test.pres[1,], test.pres[2,]) %>% as.numeric(),
nrow = 2, byrow = T)
rowSums(M)
test.pres
which(tree.pres[1,] == 1)
which(test.pres[1,] == 1)
which(test.pres[2,] == 1)
which(test.pres[1:2,] == 1)
which(test.pres[c(1, 2),] == 1)
M <- matrix(data = c(test.pres[1,], test.pres[2,]) %>% as.numeric(),
nrow = 2, byrow = T)
rowSums(M)
rowSums(test.pres[1,])
rowSums(test.pres[1,])
rowSums(test.pres[2,])
test.pres[2,]
rowSums(test.pres[3,])
rowSums(test.pres[4,])
rowSums(test.pres[4,]) + 1
rowSums(test.pres[4,]) + 4
which(test.pres[1:2,] == 1)
which(test.pres[c(3, 4),] == 1)
which(test.pres[c(1, 2),] == 1)
which(test.pres[c(1),] == 1)
which(test.pres[c(2),] == 1)
M <- matrix(data = c(test.pres[1:20,]) %>% as.numeric(),
nrow = 20, byrow = T)
M <- matrix(data = c(test.pres[1:19,]) %>% as.numeric(),
nrow = 20, byrow = T)
M <- matrix(data = c(test.pres[1,], test.pres[2,]) %>% as.numeric(),
nrow = 2, byrow = T)
M
which(test.pres[c(2),] == 1)
which(test.pres[c(1, 2),] == 1)
which(test.pres[c(1, 5),] == 1)
which(test.pres[c(1, 7),] == 1)
test.pres[7,]
rowSums(test.pres[1,])
test.pres[1,]
test.pres[7,]
which(test.pres[c(1, 7),] == 1)
rowSums(test.pres[1,])
which(test.pres[1,] == 1)
which(test.pres[3,] == 1)
test.pres[3,] == 1
which(test.pres[3,] == 1)
which(test.pres[2,] == 1)
test.pres[2,] == 1
which(test.pres[5,] == 1)
test.pres[5,] == 1
which(test.pres[5,] == 1)
which(test.pres[7,] == 1)
test.pres[7,] == 1
which(test.pres[7,] == 1)
unique(which(test.pres[7,] == 1), which(test.pres[1,] == 1))
unique(which(test.pres[7,] == 1), which(test.pres[1,] == 1)) %>% length()
rowSums(test.pres[1,])
rowSums(test.pres[1,]) / unique(which(test.pres[7,] == 1),
which(test.pres[1,] == 1)) %>% length()
sum(test.pres[2,])
unique(which(test.pres[7,] == 1),
which(test.pres[1,] == 1)) %>% length()
unique(which(test.pres[7,] == 1)
which(test.pres[7,] == 1)
which(test.pres[7,] == 1)
which(test.pres[1,] == 1)
which(test.pres[1,] == 1)
which(test.pres[7,] == 1)
intersect(which(test.pres[1,] == 1), which(test.pres[7,] == 1))
intersect(which(test.pres[7,] == 1), which(test.pres[7,] == 1))
intersect(which(test.pres[6,] == 1), which(test.pres[7,] == 1))
intersect(which(test.pres[5,] == 1), which(test.pres[7,] == 1))
length(intersect(which(test.pres[1,] == 1), which(test.pres[7,] == 1)))
trees.i <- which(test.pres[1,] == 1)
trees.j <- which(test.pres[7,] == 1)
length(intersect(trees.i, trees.j)) /
unique(trees.i, trees.j) %>% length()
length(intersect(trees.i, trees.j))
unique(trees.i, trees.j) %>% length()
trees.j
trees.i <- which(test.pres[1,] == 1)
trees.i
intersect(trees.i, trees.j)
unique(trees.i, trees.j)
unique(c(trees.i, trees.j))
length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
test.data <- data.frame("tree1" = floor(rnorm(n = 20, mean = 180, sd = 12)),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
bdist <- rep(NA, 20)
for(i in 1:ncol(test.data)){
bdist[i] <- abs(test.data[1,i] - test.data[2,i+1]) /
test.data[1,i] + test.data[2,i+1]
}
abs(test.data[1,2] - test.data[2,2]) / test.data[1,2] + test.data[2,2]
combinations(n = 20, r = 2)
choose(n = 20, k = 2)
install.packages("gtools")
library(gtools)
combinations(n = 20, r = 2)
length(combs)
# how many combinations are there
combs <- combinations(n = 20, r = 2)
length(combs)
nrow(combs)
combs
combs[1]
combs[1,]
combs[70,]
j.sim <- data.frame("comparison" = rep(NA, nrow(combs)),
"JI" = rep(NA, nrow(combs)))
i <- 1
j.sim$comparison[i] <- as.character(combs[i,])
as.character(combs[i,]
as.character(combs[i,])
paste(as.character(combs[i,]))
paste(as.character(combs[i,1]),
as.character(combs[i,2]))
paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(test.pres[n1,] == 1)
trees.j <- which(test.pres[n2,] == 1)
# calculate jaccard index
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.sim
i <- 2
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(test.pres[n1,] == 1)
trees.j <- which(test.pres[n2,] == 1)
# calculate jaccard index
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
j.sim
rm(i)
# loop definition
for(i in 1:nrow(combs)){
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(test.pres[n1,] == 1)
trees.j <- which(test.pres[n2,] == 1)
# calculate jaccard index
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end of jaccard index loop
j.sim
fjaccard <- function(binary.dataframe){
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
j.sim <- data.frame("comparison" = rep(NA, nrow(combs)),
"JI" = rep(NA, nrow(combs)))
# loop definition
for(i in 1:nrow(combs)){
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(test.pres[n1,] == 1)
trees.j <- which(test.pres[n2,] == 1)
# calculate jaccard index
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end of jaccard index loop
return(j.sim)
}  # end jaccard function
fjaccard(test.pres)
test.data <- data.frame("tree1" = floor(rnorm(n = 20, mean = 180, sd = 12)),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 120, sd = 12),
stringsAsFactors = F)
test.data <- data.frame("tree1" = floor(rnorm(n = 20, mean = 180, sd = 12)),
"tree2" = rnorm(n = 20, mean = 170, sd = 12),
"tree3" = rnorm(n = 20, mean = 150, sd = 12),
"tree4" = rnorm(n = 20, mean = 120, sd = 12),
"tree6" = rnorm(n = 20, mean = 130, sd = 12),
"tree6" = rnorm(n = 20, mean = 140, sd = 12),
stringsAsFactors = F)
test.pres <- data.frame("tree1" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree2" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree3" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree4" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree5" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
"tree6" = round(rnorm(n = 20, mean = 0.5, sd = 0.25)),
stringsAsFactors = F)
fjaccard(test.pres)
clusters <- fjaccard(test.pres)
sort(clusters)
sort(clusters$JI)
similarities <- fjaccard(test.pres)
sort(similarities$JI)
# Data Simulation variables
trees <- c("tree1", "tree2", "tree3", "tree4")
n.trees <- c(20, 20, 20, 20)
mean.trees <- c(180, 170, 150, 120)
sd.trees <- c(12, 12, 12, 12)
tree.abund <- rep(NA, sum(n.trees))
for(i in 1:length(trees)){
tree.abund <- c(tree.abund, rnorm(n.trees[i], mean.trees[i], sd.trees[i]))
}
# simulating data manually
test.data <- data.frame("tree1" = floor(rnorm(n = 46, mean = 180, sd = 12)),
"tree2" = rnorm(n = 46, mean = 170, sd = 12),
"tree3" = rnorm(n = 46, mean = 150, sd = 12),
"tree4" = rnorm(n = 46, mean = 120, sd = 12),
"tree6" = rnorm(n = 46, mean = 130, sd = 12),
"tree6" = rnorm(n = 46, mean = 140, sd = 12),
stringsAsFactors = F)
hist(x = test.data$tree1, col = "darkgreen")
test.pres <- data.frame("tree1" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree2" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree3" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree4" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree5" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree6" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
stringsAsFactors = F)
fjaccard <- function(binary.dataframe){
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
j.sim <- data.frame("comparison" = rep(NA, nrow(combs)),
"JI" = rep(NA, nrow(combs)))
# loop definition
for(i in 1:nrow(combs)){
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(test.pres[n1,] == 1)
trees.j <- which(test.pres[n2,] == 1)
# calculate jaccard index
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end of jaccard index loop
return(j.sim)
}  # end jaccard function
fjaccard(test.pres)
sort(similarities$JI)
bdist <- rep(NA, nrows(test.data))
for(i in 1:ncol(test.data)){
bdist[i] <- abs(test.data[1,i] - test.data[2,i+1]) /
test.data[1,i] + test.data[2,i+1]
}  # end b-c dissimilarity
# check results
bdist
