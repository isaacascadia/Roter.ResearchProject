# what are variables with the hieghest loading scores?
if(ncol(study1) <= 5){top.vars <- names(var.score.ranked[1:3])}
top.vars
pca$rotation[top.vars,1]  # names and scores of most important variables
study1
# simulating three different populations across 4 variables
alpine1 <- data.frame("tree1" = rnorm(n = 11, mean = 150, sd = 12),
"tree2" = rnorm(n = 11, mean = 30, sd = 12),
"tree3" = rnorm(n = 11, mean = 20, sd = 12),
"tree4" = rnorm(n = 11, mean = 100, sd = 12),
stringsAsFactors = F)
subalp1 <- data.frame("tree1" = rnorm(n = 11, mean = 150, sd = 12),
"tree2" = rnorm(n = 11, mean = 250, sd = 12),
"tree3" = rnorm(n = 11, mean = 70, sd = 12),
"tree4" = rnorm(n = 11, mean = 50, sd = 12),
stringsAsFactors = F)
valley1 <- data.frame("tree1" = rnorm(n = 11, mean = 150, sd = 12),
"tree2" = rnorm(n = 11, mean = 20, sd = 12),
"tree3" = rnorm(n = 11, mean = 300, sd = 12),
"tree4" = rnorm(n = 11, mean = 250, sd = 12),
stringsAsFactors = F)
# converting individual populations into whole dataset as a matrix
study1 <- rbind(alpine1, subalp1, valley1) %>%
data.matrix()
study1
# add plot numbers
rownames(study1) <- paste("plot", 1:nrow(study1), sep = "")
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(study1, scale = TRUE)  # returns x (PCs)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = "PCs")
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
pca.var
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
pca.var.per
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
# how much does each variable influence PC?
loading.scores <- pca$rotation[,1]
loading.scores
var.scores <- abs(loading.scores)  # get the magnitudes
var.scores
# what are variables with the hieghest loading scores?
if(ncol(study1) <= 5){top.vars <- names(var.score.ranked[1:3])}
top.vars
# what are variables with the hieghest loading scores?
if(ncol(study1) <= 5){top.vars <- names(var.score.ranked[1:3])}
# what are the magnitudes in order?
var.score.ranked <- sort(var.scores, decreasing = T)
var.score.ranked
# what are variables with the hieghest loading scores?
if(ncol(study1) <= 5){top.vars <- names(var.score.ranked[1:3])}
top.vars
pca$rotation[top.vars,1]  # names and scores of most important variables
pca$x[,1]
pca$x
fpca <- function(samps.vars, pca.name){  # function definition
# add plot numbers
rownames(samps.vars) <- paste("plot", 1:nrow(samps.vars), sep = "")
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
loading.scores <- pca$rotation[,1]
var.scores <- abs(loading.scores)  # get the magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)
if(ncol(matrix) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(matrix) >= 6 && ncol(matrix) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(matrix) >= 11){top.vars <- names(var.score.ranked[1:10])}
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(study2)
# fewer variables (3), two have variance
alpine2 <- data.frame(tree1 = rnorm(n = 11, mean = 150, sd = 12),
tree2 = rnorm(n = 11, mean = 30, sd = 12),
tree3 = rnorm(n = 11, mean = 20, sd = 12), stringsAsFactors = F)
subalp2 <- data.frame(tree1 = rnorm(n = 11, mean = 150, sd = 12),
tree2 = rnorm(n = 11, mean = 250, sd = 12),
tree3 = rnorm(n = 11, mean = 70, sd = 12), stringsAsFactors = F)
valley2 <- data.frame(tree1 = rnorm(n = 11, mean = 150, sd = 12),
tree2 = rnorm(n = 11, mean = 20, sd = 12),
tree3 = rnorm(n = 11, mean = 300, sd = 12), stringsAsFactors = F)
study2 <- rbind(alpine2, subalp2, valley2) %>%
data.matrix()
fpca(study2)
fpca(study2, pca.name = "Study 2")
fpca <- function(samps.vars, pca.name){  # function definition
# add plot numbers
rownames(samps.vars) <- paste("plot", 1:nrow(samps.vars), sep = "")
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
loading.scores <- pca$rotation[,1]
var.scores <- abs(loading.scores)  # get the magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(study2, pca.name = "Study 2")
?require()
require(dplyr)    # %>%
require(vegan)    # vegdist()
require(vegan)    # vegdist()
require(ggplot2)  # ggplot()
require(gtools)   # combinations()
getwd
getwd()
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
study1 <- rbind(alpine1, subalp1, valley1) %>% data.matrix()
study1
fadd.plot.nums <- function(plots.matrix){
rownames(plots.matrix) <- paste("plot", 1:nrow(plots.matrix), sep = "")
}
study1 <- rbind(alpine1, subalp1, valley1) %>%
data.matrix() %>% fadd.plot.nums()
study1
alpine1 <- data.frame("tree1" = rnorm(n = 11, mean = 150, sd = 12),
"tree2" = rnorm(n = 11, mean = 30, sd = 12),
"tree3" = rnorm(n = 11, mean = 20, sd = 12),
"tree4" = rnorm(n = 11, mean = 150, sd = 12), stringsAsFactors = F)
subalp1 <- data.frame("tree1" = rnorm(n = 11, mean = 150, sd = 12),
"tree2" = rnorm(n = 11, mean = 250, sd = 12),
"tree3" = rnorm(n = 11, mean = 70, sd = 12),
"tree4" = rnorm(n = 11, mean = 150, sd = 12), stringsAsFactors = F)
valley1 <- data.frame("tree1" = rnorm(n = 11, mean = 150, sd = 12),
"tree2" = rnorm(n = 11, mean = 20, sd = 12),
"tree3" = rnorm(n = 11, mean = 300, sd = 12),
"tree4" = rnorm(n = 11, mean = 150, sd = 12), stringsAsFactors = F)
study1 <- rbind(alpine1, subalp1, valley1) %>% data.matrix() %>% fadd.plot.nums()
study1
study1 <- rbind(alpine1, subalp1, valley1) %>% data.matrix()
study1
fadd.plot.nums(study1)
study1
fadd.plot.nums <- function(plots.matrix){
rownames(plots.matrix) <- paste("plot", 1:nrow(plots.matrix), sep = "")
return(plots.matrix)
}
fadd.plot.nums(study1)
study1
study1 <- rbind(alpine1, subalp1, valley1) %>% data.matrix() %>% fadd.plot.nums()
study1
fpca <- function(samps.vars, pca.name){  # function definition
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
loading.scores <- pca$rotation[,1]
var.scores <- abs(loading.scores)  # get the magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
?prcomp
500*0.75
fpca.ready <- function(plots.matrix, csv.name){  # adds plot nums to a matrix
rownames(plots.matrix) <- paste("plot", 1:nrow(plots.matrix), sep = "")
write.csv(paste(path.data.raw, "/", csv.name, ".data.csv", sep = ""))
return(plots.matrix)
}
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
fpca.ready <- function(plots.matrix, csv.name){  # adds plot nums to a matrix
rownames(plots.matrix) <- paste("plot", 1:nrow(plots.matrix), sep = "")
write.csv(paste(path.data.raw, "/", csv.name, ".data.csv", sep = ""))
return(plots.matrix)
}
study1 <- rbind(alpine1, subalp1, valley1) %>%
data.matrix() %>% fpca.ready(csv.name = study1)
study1 <- rbind(alpine1, subalp1, valley1) %>%
data.matrix() %>% fpca.ready(csv.name = "study1")
fpca.ready <- function(plots.matrix, csv.name){  # adds plot nums to a matrix
rownames(plots.matrix) <- paste("plot", 1:nrow(plots.matrix), sep = "")
write.csv(plots.matrix, paste(path.data.raw, "/", csv.name,
".data.csv", sep = ""))
return(plots.matrix)
}
study1 <- rbind(alpine1, subalp1, valley1) %>%
data.matrix() %>% fpca.ready(csv.name = "study1")
presence1 <- data.frame("tree1" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree2" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree3" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree4" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree5" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
"tree6" = round(rnorm(n = 46, mean = 0.5, sd = 0.25)),
stringsAsFactors = F)
write.csv(presence1, paste(path.data.raw, "/", "presence1.data.csv", sep = ""))
study2 <- rbind(alpine2, subalp2, valley2) %>%
data.matrix() %>% fpca.ready(csv.name = "study2")
#============================ initial data simulation ==========================
pca.test.data <- data.frame("tree1" = rnorm(n = 46, mean = 180, sd = 12),
"tree2" = rnorm(n = 46, mean = 170, sd = 12),
"tree3" = rnorm(n = 46, mean = 150, sd = 12),
"tree4" = rnorm(n = 46, mean = 120, sd = 12),
"tree6" = rnorm(n = 46, mean = 130, sd = 12),
"tree6" = rnorm(n = 46, mean = 140, sd = 12),
stringsAsFactors = F)
fpca.ready <- function(plots.matrix, csv.name){  # adds plot nums to a matrix
rownames(plots.matrix) <- paste("plot", 1:nrow(plots.matrix), sep = "")
write.csv(plots.matrix, paste(path.data.raw, "/", csv.name,
".data.csv", sep = ""))
return(plots.matrix)
}
fpca <- function(samps.vars, pca.name){  # function definition
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# begin saving of pca plots
pdf(paste(path.figures, pca.name, "figures", sep = ""),
width = 5, height = 5)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
dev.off()
loading.scores <- pca$rotation[,1]
var.scores <- abs(loading.scores)  # get the magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(study2, pca.name = "Study 2")
fpca <- function(samps.vars, pca.name){  # function definition
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# begin saving of pca plots
pdf(paste(path.figures, pca.name, "figures.pdf", sep = ""),
width = 5, height = 5)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
dev.off()
loading.scores <- pca$rotation[,1]
var.scores <- abs(loading.scores)  # get the magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(study2, pca.name = "Study 2")
fpca <- function(samps.vars, pca.name){  # function definition
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# begin saving of pca plots
pdf(paste(path.figures, gsub(" ", "", pca.name), ".figures.pdf", sep = ""),
width = 5, height = 5)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
dev.off()
loading.scores <- pca$rotation[,1]
var.scores <- abs(loading.scores)  # get the magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(study2, pca.name = "Study 2")
# # Run some script
?source()
getwd()
# # Run some script
source(paste(getwd(), "/2.data.simulation.R", sep = "")
# # Run some script
source(paste(getwd(), "/2.data.simulation.R", sep = ""))
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
fjaccard <- function(binary.dataframe, csv.name){
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
j.sim <- data.frame("comparison" = rep(NA, nrow(combs)),
"JI" = rep(NA, nrow(combs)))
# loop definition
for(i in 1:nrow(combs)){
# write name of compared pair
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(test.pres[n1,] == 1)
trees.j <- which(test.pres[n2,] == 1)
# calculate jaccard index for pair
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end of jaccard index loop
write.csv(j.sim, paste(path.data.output, "/", csv.name,
".jaccard.csv", sep = ""))
return(j.sim)
}  # end jaccard function
fjaccard(test.pres)
fjaccard(presence1)
fjaccard <- function(binary.dataframe, csv.name){
# how many combinations are there
combs <- combinations(n = nrow(binary.dataframe), r = 2)
j.sim <- data.frame("comparison" = rep(NA, nrow(combs)),
"JI" = rep(NA, nrow(combs)))
# loop definition
for(i in 1:nrow(combs)){
# write name of compared pair
j.sim$comparison[i] <- paste(as.character(combs[i,1]),
as.character(combs[i,2])) %>%
gsub(pattern = " ", replacement = "-")
# which rows (plots) are being compared?
n1 <- combs[i,1]
n2 <- combs[i,2]
trees.i <- which(binary.dataframe[n1,] == 1)
trees.j <- which(binary.dataframe[n2,] == 1)
# calculate jaccard index for pair
j.sim$JI[i] <- length(intersect(trees.i, trees.j)) /
unique(c(trees.i, trees.j)) %>% length()
}  # end of jaccard index loop
write.csv(j.sim, paste(path.data.output, "/", csv.name,
".jaccard.csv", sep = ""))
return(j.sim)
}  # end jaccard function
fjaccard(presence1)
fjaccard(presence1, "presence1")
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/4.pca.R', echo=TRUE)
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/4.pca.R', echo=TRUE)
pca$rotation
pca$rotation[top.vars,1]
fpca <- function(samps.vars, pca.name){  # pca.name is for plot/pdf titles
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# begin saving of pca plots
pdf(paste(path.figures, gsub(" ", "", pca.name), ".figures.pdf", sep = ""),
width = 5, height = 5)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
dev.off()  # finish saving plots
# loading scores goodness
loading.scores <- pca$rotation[,1]                    # display loading scores
var.scores <- abs(loading.scores)                     # loading score magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)  # loading scores in order
# determine appropriate number of loading scores to display
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
# save loading scores as .csv
write.csv(pca$rotation, paste(path.data.output, gsub(" ", "", pca.name),
".loading.csv", sep = ""))
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(pca.test.data, "pca.test")
fpca(study1, "study 1")
fpca <- function(samps.vars, pca.name){  # pca.name is for plot/pdf titles
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# begin saving of pca plots
pdf(paste(path.figures, gsub(" ", "", pca.name), ".figures.pdf", sep = ""),
width = 5, height = 5)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = "Scree Plot", las = 1,
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9)
dev.off()  # finish saving plots
# loading scores goodness
loading.scores <- pca$rotation[,1]                    # display loading scores
var.scores <- abs(loading.scores)                     # loading score magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)  # loading scores in order
# determine appropriate number of loading scores to display
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
# save loading scores as .csv
write.csv(cbind(pca$x, pca$rotation), paste(path.data.output, gsub(" ", "", pca.name),
".loading.csv", sep = ""))
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
fpca(pca.test.data, "pca.test")
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
fpca <- function(samps.vars, pca.name){  # pca.name is for plot/pdf titles
# expects samples to be rows, and variables to be columns (transpose if needed)
pca <- prcomp(samps.vars, scale = TRUE)  # returns x (PCs)
# begin saving of pca plots
pdf(paste(path.figures, gsub(" ", "", pca.name), ".figures.pdf", sep = ""),
width = 5, height = 5)
# What does the plot of our first two principal components look like?
plot(pca$x[,1], pca$x[,2], xlab = "PC 1", ylab = "PC 2",
main = paste("PCs of", pca.name, sep = " "))
# what is the variation covered by each PC?
pca.var <- pca$sdev^2
# what percent of the total variation is covered by each PC?
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
# Scree plot of variation distribution among PCs
barplot(pca.var.per, main = paste("Scree Plot of", pca.name, sep = " "),
xlab = "Principal Component", ylab = "Percent Variation",
names.arg = colnames(pca$x), cex.names = 0.9, las = 1)
dev.off()  # finish saving plots
# loading scores goodness
loading.scores <- pca$rotation[,1]                    # display loading scores
var.scores <- abs(loading.scores)                     # loading score magnitudes
var.score.ranked <- sort(var.scores, decreasing = T)  # loading scores in order
# determine appropriate number of loading scores to display
if(ncol(samps.vars) <= 5){top.vars <- names(var.score.ranked[1:3])}
if(ncol(samps.vars) >= 6 && ncol(samps.vars) <= 10){top.vars <-
names(var.score.ranked[1:5])}
if(ncol(samps.vars) >= 11){top.vars <- names(var.score.ranked[1:10])}
# save loading scores as .csv
write.csv(pca$rotation, paste(path.data.output, gsub(" ", "", pca.name),
".loading.csv", sep = ""))
print("most important variables") # names of most important variables
return(pca$rotation[top.vars,1])  # names and scores of most important variables
}  # end of pca function
source('~/SCHOOL/B6 Data Analysis in R/4.Research.project/Roter.ResearchProject/1.forest.main.R', echo=TRUE)
